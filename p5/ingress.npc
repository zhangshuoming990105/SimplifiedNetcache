#include "headers.h"

// if we need clone(loopback)
// pkt_type should distinguish original pack and cloned pack
#define CONTROLLER_MIRROR_SESSION 100

#define pkt_instance_type_normal 0
#define pkt_instance_type_ingress_clone 1
#define pkt_instance_type_egress_clone 2
#define pkt_instance_type_coalesced 3
#define pkt_instance_type_ingress_recirc 4
#define pkt_instance_type_replication 5
#define pkt_instance_type_resubmit 6

#define pkt_is_mirrored                                                        \
  ((standard_metadata.instance_type != pkt_instance_type_normal) &&            \
   (standard_metadata.instance_type != pkt_instance_type_replication))

#define pkt_is_not_mirrored                                                    \
  ((standard_metadata.instance_type == pkt_instance_type_normal) ||            \
   (standard_metadata.instance_type == pkt_instance_type_replication))





table CHECK_CACHE_EXIST() {
  key = { NETCACHE.key : exact;
}
STATUS_T Sta = _status();
uint<1> Exist = _lookup();
actions = { check_cache_exist_act(Sta, Exist);
}
size = NUM_CACHE;
}

void check_cache_exist_act(STATUS_T Sta, uint<1> Exist) {
  if (Sta == HIT && Exist == 1) {
    meta.cache_exist = 1;
  }
}

table CHECK_CACHE_VALID() {
  key = { NETCACHE.key : exact;
}
STATUS_T Sta = _status();
uint<1> Valid = _lookup();
actions = { check_cache_valid_act(Sta, Valid);
}
size = NUM_CACHE;
}

void check_cache_valid_act(STATUS_T Sta, uint<1> Valid) {
  if (Sta == HIT && Valid == 1) {
    meta.cache_valid = 1;
  }
}


table SET_CACHE_VALID() {
  key = { NETCACHE.key : exact;
}
STATUS_T Sta = _status();
actions = { set_cache_valid_act(Sta);
}
}
void set_cache_valid_act(STATUS_T Sta) {
  // set valid ->1
}

table READ_KEY_IDX() {
  key = {NETCACHE.key : exact;
  }
  STATUS_T Sta = _status();
  uint<CACHE_IDX_WIDTH> cache_idx = _lookup();
  actions = { read_key_idx_act(Sta,cache_idx);
  }
  size = NUM_CACHE;
}
void read_key_idx_act(STATUS_T Sta, uint<CACHE_IDX_WIDTH> cache_idx) {
  meta.cache_idx = cache_idx;
}


// key -> idx -> value

// inside control block, no assign sentence can be executed
@control void ingress() {
  // append to normal ingress logic
  if (_valid(NETCACHE)) {
    CHECK_CACHE_EXIST check_cache_exist = CHECK_CACHE_EXIST();
    _apply(check_cache_exist);// if key_idx is stored in cache , set meta.cache_exist -> 1
    if (meta.cache_exist == 1) {
      if (NETCACHE.op == READ_QUERY) {
        CHECK_CACHE_VALID check_cache_valid = CHECK_CACHE_VALID();
        _apply(check_cache_valid);//1bit stored whether key's value is a valid value
        if(meta.cache_valid == 1) {
          READ_KEY_IDX read_key_idx = READ_KEY_IDX();
          _apply(read_key_idx);
        }
      }
      else if(NETCACHE.op == WRITE_QUERY) {

      }
      else if (NETCACHE.op == UPDATE_COMPLETE) {
        SET_CACHE_VALID set_cache_valid = SET_CACHE_VALID();
        _apply(set_cache_valid);
      }
    }
    // if not cached, do nothing
  }
  
}